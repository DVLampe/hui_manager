// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") 
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  role          Role      @default(USER)
  phone         String?   
  avatar        String?   
  isActive      Boolean   @default(true) 
  lastLoginAt   DateTime? 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  huiGroups     HuiGroup[]    @relation("GroupManager") 
  memberships   HuiMember[]   
  payments      Payment[]     @relation("UserPayments")
  notifications Notification[] 
  auditLogs     AuditLog[]    
  paymentHistories PaymentHistory[]  
  systemSettings SystemSettings[]    
  
  takenPots     Payment[]     @relation("PotTakerUser")

  @@index([email])
  @@index([role])
  @@index([isActive])
}

enum Role {
  ADMIN
  MANAGER
  USER
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  PAYMENT_DUE
  PAYMENT_RECEIVED
  GROUP_UPDATE
  SYSTEM
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String   
  entity    String   
  entityId  String   
  details   Json?    
  ipAddress String?  
  createdAt DateTime @default(now())
}

model HuiGroup {
  id          String      @id @default(cuid())
  name        String
  description String?
  amount      Decimal     @db.Decimal(10, 2)  
  startDate   DateTime
  endDate     DateTime?
  status      GroupStatus @default(ACTIVE)
  managerId   String
  manager     User        @relation("GroupManager", fields: [managerId], references: [id])
  members     HuiMember[]
  payments    Payment[]   
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cycle       Int         @default(1)     
  totalMembers Int        @default(0) @db.SmallInt
  currentCycle Int        @default(1) @db.SmallInt
  nextPaymentDate DateTime?              
  rules       Json?                       

  @@index([status])
  @@index([managerId])
  @@index([startDate])
  @@index([endDate])
}

model HuiMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  group     HuiGroup @relation(fields: [groupId], references: [id])
  status    MemberStatus @default(ACTIVE)
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  payments  Payment[] 
  position  Int?    @db.SmallInt
  totalPaid Decimal   @db.Decimal(10, 2)
  totalDue  Decimal   @db.Decimal(10, 2)
  lastPaymentDate DateTime?             
  nextPaymentDate DateTime?             
  notes     String?                     

  @@index([userId])
  @@index([groupId])
  @@index([status])
  @@unique([userId, groupId])
}

enum GroupStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  REMOVED
}

model Payment {
  id        String   @id @default(cuid())
  
  period    Int                       // Required field
  amount    Decimal  @db.Decimal(10, 2) 
  amountCollected Decimal? @db.Decimal(10, 2) 
  scheduleStatus String?                  // Potentially redundant with new PaymentStatus enum

  type      PaymentType             
  transactionStatus PaymentStatus @default(CHO_THANH_TOAN) @map("status") // Uses new enum and default
  
  userId    String                  
  user      User     @relation("UserPayments", fields: [userId], references: [id])
  
  potTakerId String?                 
  potTaker   User?    @relation("PotTakerUser", fields: [potTakerId], references: [id])

  huiGroupId   String                 // Required field
  huiGroup     HuiGroup @relation(fields: [huiGroupId], references: [id]) // Corresponding relation also required
  
  memberId  String?                 
  member    HuiMember? @relation(fields: [memberId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  dueDate   DateTime                    
  paidAt    DateTime?                   
  cycle     Int     @db.SmallInt
  note      String?                     
  receipt   String?                     
  verifiedBy String?                    
  verifiedAt DateTime?                  
  history   PaymentHistory[]

  @@index([userId])
  @@index([potTakerId]) 
  @@index([huiGroupId])
  @@index([transactionStatus])
  @@index([dueDate])
  @@index([paidAt])
  @@index([scheduleStatus])
}

enum PaymentType {
  CONTRIBUTION
  WITHDRAWAL
  FINE
}

// Updated PaymentStatus enum with new values
enum PaymentStatus { 
  CHUA_DEN_KY
  CHO_THANH_TOAN
  DA_THANH_TOAN
  HUY
}

model PaymentHistory {
  id        String   @id @default(cuid())
  paymentId String
  payment   Payment  @relation(fields: [paymentId], references: [id])
  status    PaymentStatus // This should also use the new PaymentStatus enum
  note      String?
  createdAt DateTime @default(now())
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id])
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updatedBy String
  user      User     @relation(fields: [updatedBy], references: [id])
}
